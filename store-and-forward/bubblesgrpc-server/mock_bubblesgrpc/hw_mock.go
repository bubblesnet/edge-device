// Code generated by MockGen. DO NOT EDIT.
// Source: bubblesgrpc/bubblesgrpc.pb.go

// Package mock_bubblesgrpc is a generated GoMock package.
package mock_bubblesgrpc

import (
	bubblesgrpc "bubblesnet/edge-device/store-and-forward/bubblesgrpc-server/bubblesgrpc"
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockSensorStoreAndForwardClient is a mock of SensorStoreAndForwardClient interface
type MockSensorStoreAndForwardClient struct {
	ctrl     *gomock.Controller
	recorder *MockSensorStoreAndForwardClientMockRecorder
}

// MockSensorStoreAndForwardClientMockRecorder is the mock recorder for MockSensorStoreAndForwardClient
type MockSensorStoreAndForwardClientMockRecorder struct {
	mock *MockSensorStoreAndForwardClient
}

// NewMockSensorStoreAndForwardClient creates a new mock instance
func NewMockSensorStoreAndForwardClient(ctrl *gomock.Controller) *MockSensorStoreAndForwardClient {
	mock := &MockSensorStoreAndForwardClient{ctrl: ctrl}
	mock.recorder = &MockSensorStoreAndForwardClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSensorStoreAndForwardClient) EXPECT() *MockSensorStoreAndForwardClientMockRecorder {
	return m.recorder
}

// StoreAndForward mocks base method
func (m *MockSensorStoreAndForwardClient) StoreAndForward(ctx context.Context, in *bubblesgrpc.SensorRequest, opts ...grpc.CallOption) (*bubblesgrpc.SensorReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StoreAndForward", varargs...)
	ret0, _ := ret[0].(*bubblesgrpc.SensorReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreAndForward indicates an expected call of StoreAndForward
func (mr *MockSensorStoreAndForwardClientMockRecorder) StoreAndForward(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAndForward", reflect.TypeOf((*MockSensorStoreAndForwardClient)(nil).StoreAndForward), varargs...)
}

// GetState mocks base method
func (m *MockSensorStoreAndForwardClient) GetState(ctx context.Context, in *bubblesgrpc.GetStateRequest, opts ...grpc.CallOption) (*bubblesgrpc.GetStateReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetState", varargs...)
	ret0, _ := ret[0].(*bubblesgrpc.GetStateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState
func (mr *MockSensorStoreAndForwardClientMockRecorder) GetState(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockSensorStoreAndForwardClient)(nil).GetState), varargs...)
}

// GetRecordList mocks base method
func (m *MockSensorStoreAndForwardClient) GetRecordList(ctx context.Context, in *bubblesgrpc.GetRecordListRequest, opts ...grpc.CallOption) (*bubblesgrpc.GetRecordListReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRecordList", varargs...)
	ret0, _ := ret[0].(*bubblesgrpc.GetRecordListReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordList indicates an expected call of GetRecordList
func (mr *MockSensorStoreAndForwardClientMockRecorder) GetRecordList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordList", reflect.TypeOf((*MockSensorStoreAndForwardClient)(nil).GetRecordList), varargs...)
}

// MockSensorStoreAndForwardServer is a mock of SensorStoreAndForwardServer interface
type MockSensorStoreAndForwardServer struct {
	ctrl     *gomock.Controller
	recorder *MockSensorStoreAndForwardServerMockRecorder
}

// MockSensorStoreAndForwardServerMockRecorder is the mock recorder for MockSensorStoreAndForwardServer
type MockSensorStoreAndForwardServerMockRecorder struct {
	mock *MockSensorStoreAndForwardServer
}

// NewMockSensorStoreAndForwardServer creates a new mock instance
func NewMockSensorStoreAndForwardServer(ctrl *gomock.Controller) *MockSensorStoreAndForwardServer {
	mock := &MockSensorStoreAndForwardServer{ctrl: ctrl}
	mock.recorder = &MockSensorStoreAndForwardServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSensorStoreAndForwardServer) EXPECT() *MockSensorStoreAndForwardServerMockRecorder {
	return m.recorder
}

// StoreAndForward mocks base method
func (m *MockSensorStoreAndForwardServer) StoreAndForward(arg0 context.Context, arg1 *bubblesgrpc.SensorRequest) (*bubblesgrpc.SensorReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAndForward", arg0, arg1)
	ret0, _ := ret[0].(*bubblesgrpc.SensorReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreAndForward indicates an expected call of StoreAndForward
func (mr *MockSensorStoreAndForwardServerMockRecorder) StoreAndForward(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAndForward", reflect.TypeOf((*MockSensorStoreAndForwardServer)(nil).StoreAndForward), arg0, arg1)
}

// GetState mocks base method
func (m *MockSensorStoreAndForwardServer) GetState(arg0 context.Context, arg1 *bubblesgrpc.GetStateRequest) (*bubblesgrpc.GetStateReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0, arg1)
	ret0, _ := ret[0].(*bubblesgrpc.GetStateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState
func (mr *MockSensorStoreAndForwardServerMockRecorder) GetState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockSensorStoreAndForwardServer)(nil).GetState), arg0, arg1)
}

// GetRecordList mocks base method
func (m *MockSensorStoreAndForwardServer) GetRecordList(arg0 context.Context, arg1 *bubblesgrpc.GetRecordListRequest) (*bubblesgrpc.GetRecordListReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordList", arg0, arg1)
	ret0, _ := ret[0].(*bubblesgrpc.GetRecordListReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordList indicates an expected call of GetRecordList
func (mr *MockSensorStoreAndForwardServerMockRecorder) GetRecordList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordList", reflect.TypeOf((*MockSensorStoreAndForwardServer)(nil).GetRecordList), arg0, arg1)
}
