// Code generated by MockGen. DO NOT EDIT.
// Source: ../bubblesgrpc (interfaces: SensorStoreAndForwardClient)

// Package mock_bubblesgrpc is a generated GoMock package.
package mock_bubblesgrpc

import (
	bubblesgrpc "_/C_/Users/rodley/Documents/go/src/bubblesgrpc/bubblesgrpc"
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockSensorStoreAndForwardClient is a mock of SensorStoreAndForwardClient interface
type MockSensorStoreAndForwardClient struct {
	ctrl     *gomock.Controller
	recorder *MockSensorStoreAndForwardClientMockRecorder
}

// MockSensorStoreAndForwardClientMockRecorder is the mock recorder for MockSensorStoreAndForwardClient
type MockSensorStoreAndForwardClientMockRecorder struct {
	mock *MockSensorStoreAndForwardClient
}

// NewMockSensorStoreAndForwardClient creates a new mock instance
func NewMockSensorStoreAndForwardClient(ctrl *gomock.Controller) *MockSensorStoreAndForwardClient {
	mock := &MockSensorStoreAndForwardClient{ctrl: ctrl}
	mock.recorder = &MockSensorStoreAndForwardClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSensorStoreAndForwardClient) EXPECT() *MockSensorStoreAndForwardClientMockRecorder {
	return m.recorder
}

// StoreAndForward mocks base method
func (m *MockSensorStoreAndForwardClient) StoreAndForward(arg0 context.Context, arg1 *bubblesgrpc.SensorRequest, arg2 ...grpc.CallOption) (*bubblesgrpc.SensorReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StoreAndForward", varargs...)
	ret0, _ := ret[0].(*bubblesgrpc.SensorReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreAndForward indicates an expected call of StoreAndForward
func (mr *MockSensorStoreAndForwardClientMockRecorder) StoreAndForward(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAndForward", reflect.TypeOf((*MockSensorStoreAndForwardClient)(nil).StoreAndForward), varargs...)
}
