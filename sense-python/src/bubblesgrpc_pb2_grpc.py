# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import bubblesgrpc_pb2 as bubblesgrpc__pb2


class SensorStoreAndForwardStub(object):
    """The service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StoreAndForward = channel.unary_unary(
                '/bubblesgrpc.SensorStoreAndForward/StoreAndForward',
                request_serializer=bubblesgrpc__pb2.SensorRequest.SerializeToString,
                response_deserializer=bubblesgrpc__pb2.SensorReply.FromString,
                )
        self.GetState = channel.unary_unary(
                '/bubblesgrpc.SensorStoreAndForward/GetState',
                request_serializer=bubblesgrpc__pb2.GetStateRequest.SerializeToString,
                response_deserializer=bubblesgrpc__pb2.GetStateReply.FromString,
                )
        self.GetRecordList = channel.unary_unary(
                '/bubblesgrpc.SensorStoreAndForward/GetRecordList',
                request_serializer=bubblesgrpc__pb2.GetRecordListRequest.SerializeToString,
                response_deserializer=bubblesgrpc__pb2.GetRecordListReply.FromString,
                )


class SensorStoreAndForwardServicer(object):
    """The service definition.
    """

    def StoreAndForward(self, request, context):
        """
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRecordList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SensorStoreAndForwardServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StoreAndForward': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreAndForward,
                    request_deserializer=bubblesgrpc__pb2.SensorRequest.FromString,
                    response_serializer=bubblesgrpc__pb2.SensorReply.SerializeToString,
            ),
            'GetState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetState,
                    request_deserializer=bubblesgrpc__pb2.GetStateRequest.FromString,
                    response_serializer=bubblesgrpc__pb2.GetStateReply.SerializeToString,
            ),
            'GetRecordList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRecordList,
                    request_deserializer=bubblesgrpc__pb2.GetRecordListRequest.FromString,
                    response_serializer=bubblesgrpc__pb2.GetRecordListReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bubblesgrpc.SensorStoreAndForward', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SensorStoreAndForward(object):
    """The service definition.
    """

    @staticmethod
    def StoreAndForward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bubblesgrpc.SensorStoreAndForward/StoreAndForward',
            bubblesgrpc__pb2.SensorRequest.SerializeToString,
            bubblesgrpc__pb2.SensorReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bubblesgrpc.SensorStoreAndForward/GetState',
            bubblesgrpc__pb2.GetStateRequest.SerializeToString,
            bubblesgrpc__pb2.GetStateReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRecordList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bubblesgrpc.SensorStoreAndForward/GetRecordList',
            bubblesgrpc__pb2.GetRecordListRequest.SerializeToString,
            bubblesgrpc__pb2.GetRecordListReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
